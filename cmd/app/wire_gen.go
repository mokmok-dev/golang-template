// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/mokmok-dev/golang-template/adapter/handler"
	"github.com/mokmok-dev/golang-template/adapter/server"
	logger2 "github.com/mokmok-dev/golang-template/domain/logger"
	"github.com/mokmok-dev/golang-template/infra/configuration"
	"github.com/mokmok-dev/golang-template/infra/logger"
	"github.com/mokmok-dev/golang-template/infra/postgres"
	"github.com/mokmok-dev/golang-template/infra/postgres/model"
	"github.com/mokmok-dev/golang-template/infra/repository"
	"github.com/mokmok-dev/golang-template/infra/tracer"
	"github.com/mokmok-dev/golang-template/usecase"
	"net/http"
)

// Injectors from wire.go:

func initialize() (*app, error) {
	contextContext := context.Background()
	config, err := configuration.NewConfig()
	if err != nil {
		return nil, err
	}
	log := config.Log
	loggerLogger, err := logger.NewLogger(log)
	if err != nil {
		return nil, err
	}
	gcp := config.GCP
	tracerTracer, err := tracer.NewTracer(gcp)
	if err != nil {
		return nil, err
	}
	configurationServer := config.Server
	database := config.Database
	db, err := postgres.NewPostgres(contextContext, loggerLogger, database)
	if err != nil {
		return nil, err
	}
	queries := model.New(db)
	repositoryRepository := repository.NewRepository(tracerTracer, db, queries)
	createUser := usecase.NewCreateUser(loggerLogger, tracerTracer, repositoryRepository)
	getUserByID := usecase.NewGetUserByID(loggerLogger, tracerTracer, repositoryRepository)
	updateUserByID := usecase.NewUpdateUserByID(loggerLogger, tracerTracer, repositoryRepository)
	removeUserByID := usecase.NewRemoveUserByID(loggerLogger, tracerTracer, repositoryRepository)
	user := handler.NewUser(loggerLogger, tracerTracer, createUser, getUserByID, updateUserByID, removeUserByID)
	handlerHandler := handler.NewHandler(loggerLogger, tracerTracer, user)
	httpServer := server.NewServer(loggerLogger, tracerTracer, configurationServer, handlerHandler)
	mainApp := &app{
		ctx:    contextContext,
		logger: loggerLogger,
		server: httpServer,
	}
	return mainApp, nil
}

// wire.go:

type app struct {
	ctx    context.Context
	logger logger2.Logger
	server *http.Server
}
