// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: golang-template/v1/user.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/mokmok-dev/golang-template/proto/golang-template/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/v1.UserService/CreateUser"
	// UserServiceGetUserByIDProcedure is the fully-qualified name of the UserService's GetUserByID RPC.
	UserServiceGetUserByIDProcedure = "/v1.UserService/GetUserByID"
	// UserServiceUpdateUserByIDProcedure is the fully-qualified name of the UserService's
	// UpdateUserByID RPC.
	UserServiceUpdateUserByIDProcedure = "/v1.UserService/UpdateUserByID"
	// UserServiceRemoveUserByIDProcedure is the fully-qualified name of the UserService's
	// RemoveUserByID RPC.
	UserServiceRemoveUserByIDProcedure = "/v1.UserService/RemoveUserByID"
)

// UserServiceClient is a client for the v1.UserService service.
type UserServiceClient interface {
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	GetUserByID(context.Context, *connect_go.Request[v1.GetUserByIDRequest]) (*connect_go.Response[v1.GetUserByIDResponse], error)
	UpdateUserByID(context.Context, *connect_go.Request[v1.UpdateUserByIDRequest]) (*connect_go.Response[v1.UpdateUserByIDResponse], error)
	RemoveUserByID(context.Context, *connect_go.Request[v1.RemoveUserByIDRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewUserServiceClient constructs a client for the v1.UserService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		createUser: connect_go.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			opts...,
		),
		getUserByID: connect_go.NewClient[v1.GetUserByIDRequest, v1.GetUserByIDResponse](
			httpClient,
			baseURL+UserServiceGetUserByIDProcedure,
			opts...,
		),
		updateUserByID: connect_go.NewClient[v1.UpdateUserByIDRequest, v1.UpdateUserByIDResponse](
			httpClient,
			baseURL+UserServiceUpdateUserByIDProcedure,
			opts...,
		),
		removeUserByID: connect_go.NewClient[v1.RemoveUserByIDRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceRemoveUserByIDProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser     *connect_go.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUserByID    *connect_go.Client[v1.GetUserByIDRequest, v1.GetUserByIDResponse]
	updateUserByID *connect_go.Client[v1.UpdateUserByIDRequest, v1.UpdateUserByIDResponse]
	removeUserByID *connect_go.Client[v1.RemoveUserByIDRequest, emptypb.Empty]
}

// CreateUser calls v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUserByID calls v1.UserService.GetUserByID.
func (c *userServiceClient) GetUserByID(ctx context.Context, req *connect_go.Request[v1.GetUserByIDRequest]) (*connect_go.Response[v1.GetUserByIDResponse], error) {
	return c.getUserByID.CallUnary(ctx, req)
}

// UpdateUserByID calls v1.UserService.UpdateUserByID.
func (c *userServiceClient) UpdateUserByID(ctx context.Context, req *connect_go.Request[v1.UpdateUserByIDRequest]) (*connect_go.Response[v1.UpdateUserByIDResponse], error) {
	return c.updateUserByID.CallUnary(ctx, req)
}

// RemoveUserByID calls v1.UserService.RemoveUserByID.
func (c *userServiceClient) RemoveUserByID(ctx context.Context, req *connect_go.Request[v1.RemoveUserByIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.removeUserByID.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the v1.UserService service.
type UserServiceHandler interface {
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	GetUserByID(context.Context, *connect_go.Request[v1.GetUserByIDRequest]) (*connect_go.Response[v1.GetUserByIDResponse], error)
	UpdateUserByID(context.Context, *connect_go.Request[v1.UpdateUserByIDRequest]) (*connect_go.Response[v1.UpdateUserByIDResponse], error)
	RemoveUserByID(context.Context, *connect_go.Request[v1.RemoveUserByIDRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userServiceCreateUserHandler := connect_go.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	userServiceGetUserByIDHandler := connect_go.NewUnaryHandler(
		UserServiceGetUserByIDProcedure,
		svc.GetUserByID,
		opts...,
	)
	userServiceUpdateUserByIDHandler := connect_go.NewUnaryHandler(
		UserServiceUpdateUserByIDProcedure,
		svc.UpdateUserByID,
		opts...,
	)
	userServiceRemoveUserByIDHandler := connect_go.NewUnaryHandler(
		UserServiceRemoveUserByIDProcedure,
		svc.RemoveUserByID,
		opts...,
	)
	return "/v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserByIDProcedure:
			userServiceGetUserByIDHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserByIDProcedure:
			userServiceUpdateUserByIDHandler.ServeHTTP(w, r)
		case UserServiceRemoveUserByIDProcedure:
			userServiceRemoveUserByIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByID(context.Context, *connect_go.Request[v1.GetUserByIDRequest]) (*connect_go.Response[v1.GetUserByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.UserService.GetUserByID is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserByID(context.Context, *connect_go.Request[v1.UpdateUserByIDRequest]) (*connect_go.Response[v1.UpdateUserByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.UserService.UpdateUserByID is not implemented"))
}

func (UnimplementedUserServiceHandler) RemoveUserByID(context.Context, *connect_go.Request[v1.RemoveUserByIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.UserService.RemoveUserByID is not implemented"))
}
